#include <util/delay.h>
#include <avr/pgmspace.h>
#include "ssd1306.h"
#include "i2cmaster.h"

#define SSD1306_INIT_TABLE_LENGTH (sizeof(ssd1306_init_table)/sizeof(ssd1306_init_table[0]))
static const uint8_t ssd1306_init_table[] PROGMEM = {
    0xAE,
    0xD5, 0x80,
    0xA8, 0x3F,
    0xD3, 0x00,
    0x40,
    0x8D, 0x14,
    0x20, 0x00,
    0xA1,
    0xC0,
    0xDA, 0x12,
    0x81, 0xCF,
    0xD9, 0xF1,
    0xDB, 0x40,
    0xA4,
    0xA6,
    0xAF
};

#define SSD1306_DEMO_TABLE_LENGTH (sizeof(ssd1306_demo_table)/sizeof(ssd1306_demo_table[0]))
static const uint8_t ssd1306_demo_table[] PROGMEM = {
    0x00, 0x00, 0xEF, 0x80, 0x80, 0x03, 0xC0, 0xC0,
    0x03, 0xE0, 0xE0, 0x02, 0xF0, 0xF0, 0x02, 0xF8,
    0xF8, 0x02, 0xFC, 0xFC, 0x02, 0x7E, 0x1E, 0x03,
    0x80, 0x80, 0x03, 0x00, 0x00, 0x09, 0x80, 0x80,
    0x03, 0x00, 0x00, 0x03, 0x80, 0x80, 0x02, 0x00,
    0x00, 0x45, 0xC0, 0xE0, 0xE0, 0x04, 0xF0, 0xF0,
    0x04, 0xF8, 0xF8, 0x04, 0xFC, 0xFC, 0x03, 0xFE,
    0xFE, 0x03, 0x7F, 0x7F, 0x06, 0x3F, 0x3F, 0x03,
    0x1F, 0x9F, 0x8F, 0x8F, 0x02, 0xC7, 0x03, 0x03,
    0x02, 0x01, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x03,
    0x00, 0x80, 0xC0, 0xE0, 0xF0, 0x38, 0x1C, 0x0E,
    0x07, 0x03, 0x01, 0x00, 0x00, 0x04, 0xF3, 0xF3,
    0x02, 0x00, 0x00, 0x04, 0xF0, 0xF0, 0x02, 0xC0,
    0x60, 0x30, 0x30, 0x03, 0x70, 0xF0, 0xE0, 0xC0,
    0x60, 0x20, 0x30, 0x30, 0x03, 0x70, 0xE0, 0xC0,
    0x00, 0x00, 0x04, 0xC0, 0xE0, 0x60, 0x30, 0x30,
    0x05, 0x60, 0xE0, 0xC0, 0x00, 0x00, 0x04, 0xF0,
    0xF0, 0x02, 0xC0, 0x60, 0x30, 0x30, 0x02, 0x70,
    0x00, 0x00, 0x02, 0xC0, 0xE0, 0x60, 0x30, 0x30,
    0x05, 0x70, 0xE0, 0xC0, 0x00, 0x00, 0x06, 0x80,
    0xFF, 0xFF, 0x05, 0x7F, 0x01, 0x01, 0x02, 0xF9,
    0xF8, 0x78, 0x78, 0x02, 0x7C, 0x7C, 0x08, 0x3C,
    0x3E, 0x3E, 0x03, 0x1E, 0x1E, 0x02, 0x9F, 0x8F,
    0x07, 0x07, 0x02, 0x03, 0x01, 0x00, 0x00, 0x07,
    0xFF, 0xFF, 0x03, 0x07, 0x03, 0x01, 0x03, 0x07,
    0x0F, 0x3E, 0x78, 0xF0, 0xE0, 0x80, 0x00, 0x00,
    0x04, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x04, 0xFF,
    0xFF, 0x02, 0x01, 0x00, 0x00, 0x05, 0xFF, 0xFF,
    0x03, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x02, 0x00,
    0x00, 0x03, 0x7F, 0xFF, 0xEB, 0x8C, 0x0C, 0x0C,
    0x05, 0x8C, 0xCF, 0xCF, 0x02, 0x4F, 0x00, 0x00,
    0x03, 0xFF, 0xFF, 0x02, 0x01, 0x00, 0x00, 0x05,
    0xE0, 0xF0, 0xF9, 0x18, 0x0C, 0x0C, 0x05, 0xC4,
    0xFF, 0xFF, 0x02, 0x00, 0x00, 0x04, 0xC0, 0xF8,
    0xFF, 0xFF, 0x04, 0x3F, 0x07, 0x00, 0x38, 0x3E,
    0x3C, 0x3C, 0x04, 0x3E, 0x3E, 0x07, 0x9E, 0x9E,
    0x02, 0x9F, 0x8F, 0x4F, 0x07, 0x03, 0x03, 0x02,
    0x00, 0x00, 0x0C, 0x03, 0x03, 0x03, 0x00, 0x00,
    0x09, 0x03, 0x03, 0x03, 0x02, 0x00, 0x00, 0x02,
    0x03, 0x03, 0x02, 0x00, 0x00, 0x04, 0x03, 0x03,
    0x02, 0x00, 0x00, 0x06, 0x03, 0x03, 0x03, 0x00,
    0x00, 0x06, 0x03, 0x03, 0x02, 0x00, 0x00, 0x05,
    0x01, 0x03, 0x03, 0x03, 0x02, 0x03, 0x03, 0x03,
    0x01, 0x01, 0x02, 0x00, 0x00, 0x04, 0x03, 0x03,
    0x02, 0x00, 0x00, 0x07, 0x01, 0x03, 0x03, 0x02,
    0x02, 0x02, 0x03, 0x03, 0x03, 0x02, 0x01, 0x03,
    0x03, 0x02, 0x43, 0x70, 0x38, 0x3E, 0x3F, 0x1F,
    0x0F, 0x07, 0x03, 0x00, 0x0C, 0x0E, 0x0F, 0x0F,
    0x0A, 0x07, 0x07, 0x04, 0x03, 0x03, 0x02, 0x01,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0x12
};

uint8_t ssd1306_init(void)
{
    /* reset */
    DDRB  |=  (1<<PB0);
    PORTB |=  (1<<PB0);
    _delay_ms(1);
    PORTB &= ~(1<<PB0);
    _delay_ms(10);
    PORTB |=  (1<<PB0);
    
    uint8_t i;
    uint8_t ret = 0;
    for (i = 0; i < SSD1306_INIT_TABLE_LENGTH; i++) {
        ret = ssd1306_command(pgm_read_byte(ssd1306_init_table[i]));
        if (ret) {
            break;
        }
    }

    return ret;
}

uint8_t ssd1306_demo(void)
{
    uint8_t ret = 0;

    ssd1306_command(SSD1306_COMM_COLUMNADDR);
    ssd1306_command(0);
    ssd1306_command(SSD1306_LCD_WIDTH - 1);

    ssd1306_command(SSD1306_COMM_PAGEADDR);
    ssd1306_command(0);
    ssd1306_command(7);

#if 0
#ifdef TWBR
    uint8_t _twbr = TWBR;
    TWBR = 12;
#endif
#endif

#if 0
    uint16_t i, j;
    uint16_t count = 1;
    uint8_t data;
    uint8_t length = 1;
    for (i = 0; i < SSD1306_DEMO_TABLE_LENGTH; i++) {
        data = pgm_read_byte(ssd1306_demo_table[i]);
        if (data == pgm_read_byte(ssd1306_demo_table[i + 1])) {
            data = pgm_read_byte(ssd1306_demo_table[i + 2]);
            for (j = 0; j < length; j++) {
                ret = i2c_write(data);
                if (ret) goto stop;
                count++;
            }
            i += 2;
        }
        else {
            ret = i2c_write(data);
            if (ret) goto stop;
            count++;
        }
        if (count >= SSD1306_BUFFER_SIZE) {
            break;
        }
    }
#else
    uint16_t i;
    uint8_t j;
    for (i = 0; i < SSD1306_BUFFER_SIZE; i++) {
        ret = i2c_start(SSD1306_ADDR | I2C_WRITE);
        ret = i2c_write(0x40);
        for (j = 0; j < 16; j++) {
            ret = i2c_write(0xFF);
            i++;
        }
        i--;
        i2c_stop();
    }
#endif


#if 0
#ifdef TWBR
    TWBR = _twbr;
#endif
#endif

    return ret;
}

uint8_t ssd1306_command(uint8_t command)
{
    uint8_t ret;
    ret = i2c_start(SSD1306_ADDR | I2C_WRITE);
    if (ret) goto stop;
    ret = i2c_write(0x00);
    if (ret) goto stop;
    ret = i2c_write(command);
stop:
    i2c_stop();
    return ret;
}

uint8_t ssd1306_data(uint8_t data)
{
    uint8_t ret;
    ret = i2c_start(SSD1306_ADDR | I2C_WRITE);
    if (ret) goto stop;
    ret = i2c_write(0x40);
    if (ret) goto stop;
    ret = i2c_write(data);
stop:
    i2c_stop();
    return ret;
}
